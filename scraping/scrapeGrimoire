#!/bin/bash
# a script to scrape the grimoire into an xml document
# GASP XML!! OMFG NOES!
#grab the sorcery stuffs
. /etc/sorcery/config

# a global variable!
SEDFILE="/tmp/sed.xml"


################################################################################
# Hash functions
################################################################################
#uses the currently set spell
function my_get_spell_sources() {
	local foo
	for foo in $(get_source_nums SOURCE); do
		echo ${!foo}
	done
}

# takes $1 for a specific number
function my_get_spell_source_hash() {
	local sourcevar=SOURCE${1}
	local hashvar="${sourcevar}_HASH"
	local ignorevar="${sourcevar}_IGNORE"

	if [[ "${!hashvar}" == "" ]]; then
		# no hash
		if [[ "${!ignorevar}" == "signature" ]]; then
			echo -n "${!ignorevar}"
		else
			local gpgvar="${sourcevar}_GPG"
			if [[ "${!gpgvar}" == "" ]] ; then
				# not a gpg either, must be MD5 or no hash!
				local md5var="MD5[*]"
				if [[ "${!md5var[$1]}" == "" ]]; then
					# no verification provided!
					echo -n "none"
				else
					#going to break the rules here and add md5: to it
					echo -n "md5:${!md5var[$1]}"
				fi
			else
				echo -n ${!gpgvar}
			fi
		fi
	else
		echo -n ${!hashvar}
	fi
}

function my_get_spell_source_hashes() {
	local foo
	for foo in $(get_source_nums); do
		my_get_spell_source_hash $foo
	done
}

#uses the current spell and a number, or no number 
# barfs all the URLS for that source
function my_get_spell_source_urls() {
	local bar
	local urlvar="SOURCE${1}_URL[*]"

	for bar in ${!urlvar}; do
		echo $bar
	done
}

function my_get_all_spell_source_urls() {
	local foo

	for foo in $(get_source_nums); do
		my_get_spell_source_urls $foo
	done
}
################################################################################
# END hash functions
################################################################################

function xml_safe() {
	# $1 is the input string
#	local string="$1"
#	string="${string//</&lt;}"
#	string="${string//>/&gt;}"
#	string="${string//&/&amp;}"
#	string="${string//\"/&quot;}"
#	string="${string//\'/&#39;}"
#	echo "$string"
	echo -n "$1" | sed -f $SEDFILE
}

function prepare_sed_xml_file() {
	# writes out the xml.sed file to /tmp
cat > $SEDFILE <<EOL
#some sed recipies to make sure that xml is nice n friendly
s/</\&lt;/g
s/>/\&gt;/g
s/\&/\&amp;/g
s/"/\&quot;/g
s/'/\&#39;/g
s/ $//g
EOL
}

function multi_line_xml_safe() {
	# stdin is the multiple lines
	#TODO: I think this may need work. sed-f may work better...
	#while read -t 1 line; do
	#	echo "$(xml_safe "$line")"
	#done
	sed -f $SEDFILE
}

function usage() {
	echo "Usage: grimoire2xml grimoire1 grimoire2"
	echo "Usage: grimoire2xml all"
}

function scrapeCodex() {
	# Arguments are the grimoires to scrape
	local grimoire

	# this is the only time we don't append. so that it overwrites
	#set up the encoding for the xml file, needed to make some things work
	echo -e '<?xml version="1.0" encoding="ISO-8859-1"?>'
	echo -e "<codex>"

	for grimoire in "$@" ; do
		# scrape each grimoire
		scrapeGrimoire $grimoire
	done
	
	# done with the codex
	echo -e "</codex>"
}


function scrapeGrimoire() {
	#$1 is the grimoire name to do the scraping on
	
	# Local variables
	local grimoire_name
	local grimoire_path
	local section_name
	local section_path

	#get the necessary grimoire metadata
	grimoire_name=$1
	grimoire_path=$(codex_canonicalize_grimoire_name $grimoire_name lookup)

	#output the xml for the grimoire first
	echo -e "\t<grimoire name=\"$grimoire_name\">"
	
	#get all the sections
	# for each section call the section function :D
	for section_path in $(codex_get_all_sections $grimoire_path); do
		section_name=${section_path##*/}
		scrapeSection $grimoire_path $section_name
	done
	
	#after all the sections are done
	echo -e "\t</grimoire>"
}

function scrapeSection() {
	#$1 is the grimoire path Ex: /var/lib/sorcery/codex/test/
	#$2 is the section name  Ex: antivirus

	local grimoire_path=$1
	local section_name=$2
	local section_path="$grimoire_path/$section_name"
	local spell_path
	local spell_name

	echo -e "\t\t<section name=\"$section_name\">"

	# get maintainer information
	# and echo the maintainer information to the xmlfile
	echo -e "\t\t<maintainer>"
	if [ -s $section_path/MAINTAINER ] ; then
		cat $section_path/MAINTAINER 2>/dev/null | sed -f $SEDFILE
	else
		echo -e "\t\tUnmaintained"
	fi
	echo -e "\t\t</maintainer>"

	# get all the spells in this section
	# run the spell function for each spell
	for spell_path in $(codex_get_spells_in_section $section_path); do
		spell_name=${spell_path##*/}
		( scrapeSpell $section_path $spell_name )
	done

	# done with the section
	echo -e "\t\t</section>"
}

function scrapeSpell() {
	#$1 is the section path
	#$2 is the spell name
	
	local section_path=$1
	local spell_name=$2
	local spell_path="$section_path/$spell_name"
	local source_var
	local source_num
	local source_url

	codex_set_current_spell $spell_path
	
	#get all the spell elements
	echo -e  "\t\t\t<spell name=\"$spell_name\" version=\"${VERSION}\">"
	
	echo -en "\t\t\t\t<url>"
	xml_safe "${WEB_SITE}"
	echo -e  "</url>"
	
	echo -en "\t\t\t\t<license>"
	xml_safe "${LICENSE}"
	echo -e  "</license>"
	
	echo -en "\t\t\t\t<keywords>"
	xml_safe "${KEYWORDS}"
	echo -e  "</keywords>"
	
	echo -en "\t\t\t\t<short>"
	xml_safe "${SHORT}"
	echo -e  "</short>"

	echo -en "\t\t\t\t<long>"
	echo "$(codex_get_spell_description $spell_path)" | multi_line_xml_safe
	echo -e  "</long>"

	# for each source get the source, it verification, and the url for it
	for source_var in $(get_source_nums SOURCE) ; do
		source_num="${source_var##SOURCE}"
		source_var="SOURCE${source_num}"

		if [[ "${!source_var}" != "" ]]; then
			# w00ts got a source!
			# get the source hash and the name
			echo -en "\t\t\t\t<source source=\""
			xml_safe "${!source_var}"
			echo -en "\" hash=\""
			my_get_spell_source_hash ${source_num}
			echo -e "\">"

			for source_url in $(my_get_spell_source_urls ${source_num}); do
				echo -en "\t\t\t\t\t<source_url>"
				xml_safe ${source_url}
				echo -e  "</source_url>"
			done #done with source_urls for that source
			echo -e "\t\t\t\t</source>" 
		fi #didn't have any sources
	done #done with sources and hashes

	# perhaps add dependency information
	# provides

	# finish off the spell element
	echo -e "\t\t\t</spell>"
}

###############################################################################
# actual stuff starts here!
# arguments are just grimoires or all

if [[ "$BASH_ARGC" == "" ]]; then
	usage
	exit 1
fi

#make sure I've got an xml.sed for me to use
prepare_sed_xml_file

grimoire_list=""

for grimoire in "$@"; do
	if [[ "$grimoire" != "all" ]]; then
		if codex_find_grimoire $grimoire 2>&1 1>/dev/null; then
			grimoire_list="$grimoire_list $grimoire"
		else
			if [[ "$SILENT" == "" ]]; then
				echo "Dropping grimoire $grimoire, as it doesn't exist!"
			fi
		fi
	else
		grimoire_list="all"
	fi

done

grimoire_list=${grimoire_list# }

if [[ "$grimoire_list" == "all" ]]; then
	grimoire_list=""
	for grimoire in $(codex_get_all_grimoires); do
		grimoire_list="$grimoire_list ${grimoire##*/}"
	done
fi

scrapeCodex $grimoire_list
